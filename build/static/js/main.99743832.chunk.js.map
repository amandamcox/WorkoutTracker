{"version":3,"sources":["components/NewWorkout.js","components/EditableInput.js","components/WorkoutTable.js","services/workouts.js","components/App.js","index.js"],"names":["NewWorkout","onSave","useState","exerciseSelection","setExerciseSelection","className","role","id","onChange","e","target","value","exercises","map","exercise","key","tracking","trackingType","type","defaultValue","Date","toLocaleDateString","year","month","day","split","join","chosenIndex","document","getElementById","options","selectedIndex","getAttribute","determineTracking","placeholder","onClick","newRecord","date","trackedMetric","EditableInput","text","children","childSave","props","isEditing","setEditing","el","name","WorkoutTable","workoutData","onDelete","onEdit","editedValue","setEditedValue","handleEdit","field","editObject","alert","getExerciseMetric","savedObject","exerciseObj","find","row","_id","String","apiBase","newObject","a","async","axios","post","req","data","patch","delete","App","savedWorkouts","setSavedWorkouts","sortDataByDate","sort","b","parse","useEffect","get","sortedData","getInitialLoad","handleNewRecordSave","workoutService","newSavedWorkout","newSortedWorkouts","concat","Fragment","length","filter","workout","newEditedWorkout","ReactDOM","render"],"mappings":"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","file":"static/js/main.99743832.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport exercises from '../statics/exerciseDataSet'\r\n\r\nconst NewWorkout = ({ onSave }) => {\r\n\tconst [exerciseSelection, setExerciseSelection] = useState('')\r\n\r\n\tconst handleSave = () => {\r\n\t\tconst newRecord = {\r\n\t\t\texercise: document.getElementById('new-exercise').value,\r\n\t\t\tdate: new Date(`${document.getElementById('new-date').value}T08:00:00.000Z`),\r\n\t\t\ttrackedMetric: document.getElementById('new-tracking').value,\r\n\t\t}\r\n\t\tonSave(newRecord)\r\n\t}\r\n\r\n\tconst determineTracking = () => {\r\n\t\tconst chosenIndex = document.getElementById('new-exercise').options.selectedIndex\r\n\t\tconst tracking = document\r\n\t\t\t.getElementById('new-exercise')\r\n\t\t\t.options[chosenIndex].getAttribute('tracking')\r\n\t\tif (tracking === 'reps') {\r\n\t\t\treturn 'How many reps?'\r\n\t\t} else if (tracking === 'time') {\r\n\t\t\treturn 'How long (in minutes)?'\r\n\t\t} else if (tracking === 'distance') {\r\n\t\t\treturn 'How far (in miles)?'\r\n\t\t} else if (tracking === 'weight') {\r\n\t\t\treturn 'How much weight (in pounds)?'\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='ui form segment' role='rowgroup'>\r\n\t\t\t<div className='new-exercise-group'>\r\n\t\t\t\t<div className='ui dropdown align-table-content' role='cell'>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tExercise\r\n\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\tid='new-exercise'\r\n\t\t\t\t\t\t\tonChange={e => setExerciseSelection(e.target.value)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<option value=''>Exercises</option>\r\n\t\t\t\t\t\t\t{exercises.map(exercise => (\r\n\t\t\t\t\t\t\t\t<option\r\n\t\t\t\t\t\t\t\t\tkey={exercise.exercise}\r\n\t\t\t\t\t\t\t\t\tvalue={exercise.exercise}\r\n\t\t\t\t\t\t\t\t\ttracking={exercise.trackingType}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{exercise.exercise}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='ui input dropdown align-table-content' role='cell'>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tDate\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tid='new-date'\r\n\t\t\t\t\t\t\ttype='date'\r\n\t\t\t\t\t\t\tdefaultValue={new Date()\r\n\t\t\t\t\t\t\t\t.toLocaleDateString('zh', {\r\n\t\t\t\t\t\t\t\t\tyear: 'numeric',\r\n\t\t\t\t\t\t\t\t\tmonth: '2-digit',\r\n\t\t\t\t\t\t\t\t\tday: '2-digit',\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t.split('/')\r\n\t\t\t\t\t\t\t\t.join('-')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='ui input align-table-content' role='cell'>\r\n\t\t\t\t\t{exerciseSelection ? (\r\n\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t{determineTracking()}\r\n\t\t\t\t\t\t\t<input id='new-tracking' type='text' />\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<div className='ui input disabled'>\r\n\t\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t\t\tReps/Time/Dis/lbs\r\n\t\t\t\t\t\t\t\t<input id='new-tracking' type='text' placeholder='Tracked Metric' />\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='align-table-content align-button' role='cell'>\r\n\t\t\t\t\t<button onClick={handleSave} className='ui right labeled icon blue button'>\r\n\t\t\t\t\t\t<i className='save icon'></i>\r\n\t\t\t\t\t\tSave\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default NewWorkout\r\n","import React, { useState } from 'react'\r\n\r\nconst EditableInput = ({ text, children, childSave, ...props }) => {\r\n\tconst [isEditing, setEditing] = useState(false)\r\n\r\n\tconst onEdit = el => {\r\n\t\tchildSave(el.id, el.name)\r\n\t\tsetEditing(false)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<section {...props}>\r\n\t\t\t{isEditing ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{children}\r\n\t\t\t\t\t<div className='edit-buttons'>\r\n\t\t\t\t\t\t<span className='ui clickable-icon' onClick={() => onEdit(children.props)}>\r\n\t\t\t\t\t\t\t<i className='save icon blue' />\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span className='ui clickable-icon' onClick={() => setEditing(false)}>\r\n\t\t\t\t\t\t\t<i className='close icon red' />\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<div className='clickable-icon' onClick={() => setEditing(true)}>\r\n\t\t\t\t\t<span className='ui label'>\r\n\t\t\t\t\t\t<i className='icon edit'></i>\r\n\t\t\t\t\t\t{text}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default EditableInput\r\n","import React, { useState } from 'react'\r\nimport EditableInput from './EditableInput'\r\nimport exercises from '../statics/exerciseDataSet'\r\n\r\nconst WorkoutTable = ({ workoutData, onDelete, onEdit }) => {\r\n\tconst [editedValue, setEditedValue] = useState('')\r\n\r\n\tconst handleDelete = id => {\r\n\t\tonDelete(id)\r\n\t}\r\n\r\n\tconst handleEdit = (id, field) => {\r\n\t\tif (editedValue !== '') {\r\n\t\t\tlet editObject = {}\r\n\t\t\tfield === 'date'\r\n\t\t\t\t? (editObject[field] = `${editedValue}T08:00:00.000Z`)\r\n\t\t\t\t: (editObject[field] = editedValue)\r\n\t\t\tonEdit(id, editObject)\r\n\t\t} else {\r\n\t\t\talert('You must enter a value')\r\n\t\t}\r\n\t}\r\n\r\n\tconst getExerciseMetric = savedObject => {\r\n\t\tconst exerciseObj = exercises.find(exercise => savedObject.exercise === exercise.exercise)\r\n\t\tif (exerciseObj.trackingType === 'reps') {\r\n\t\t\treturn 'reps'\r\n\t\t} else if (exerciseObj.trackingType === 'time') {\r\n\t\t\treturn 'min'\r\n\t\t} else if (exerciseObj.trackingType === 'distance') {\r\n\t\t\treturn 'miles'\r\n\t\t} else if (exerciseObj.trackingType === 'weight') {\r\n\t\t\treturn 'lbs'\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='ui segment' role='table'>\r\n\t\t\t<div className='table-header table-group' role='rowgroup'>\r\n\t\t\t\t<div role='columnheader'>Workout Type</div>\r\n\t\t\t\t<div role='columnheader'>Date</div>\r\n\t\t\t\t<div role='columnheader'>Tracking Metric</div>\r\n\t\t\t\t<div role='columnheader'>Actions</div>\r\n\t\t\t</div>\r\n\t\t\t{workoutData.map(row => (\r\n\t\t\t\t<div className='table-group' role='rowgroup' key={row._id}>\r\n\t\t\t\t\t<div className='ui input' role='cell'>\r\n\t\t\t\t\t\t<span>{row.exercise}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='ui input' role='cell'>\r\n\t\t\t\t\t\t<EditableInput\r\n\t\t\t\t\t\t\ttext={new Date(row.date).toLocaleDateString()}\r\n\t\t\t\t\t\t\tchildSave={handleEdit}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid={row._id}\r\n\t\t\t\t\t\t\t\ttype='date'\r\n\t\t\t\t\t\t\t\tname='date'\r\n\t\t\t\t\t\t\t\tclassName='edit-inputs'\r\n\t\t\t\t\t\t\t\tplaceholder={new Date(row.date).toLocaleDateString()}\r\n\t\t\t\t\t\t\t\tonChange={e => setEditedValue(e.target.value)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</EditableInput>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='ui input' role='cell'>\r\n\t\t\t\t\t\t<EditableInput\r\n\t\t\t\t\t\t\ttext={`${row.trackedMetric} ${getExerciseMetric(row)}`}\r\n\t\t\t\t\t\t\tchildSave={handleEdit}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tid={row._id}\r\n\t\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\t\tname='trackedMetric'\r\n\t\t\t\t\t\t\t\tclassName='edit-inputs'\r\n\t\t\t\t\t\t\t\tplaceholder={String(row.trackedMetric)}\r\n\t\t\t\t\t\t\t\tonChange={e => setEditedValue(e.target.value)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</EditableInput>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div role='cell'>\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tclassName='trash alternate outline icon clickable-icon red'\r\n\t\t\t\t\t\t\tonClick={() => handleDelete(row._id)}\r\n\t\t\t\t\t\t></i>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default WorkoutTable\r\n","import axios from 'axios'\r\n\r\nconst apiBase = '/api/workouts'\r\n\r\nconst getAll = async () => {\r\n\tconst req = await axios.get(apiBase)\r\n\treturn req.data\r\n}\r\n\r\nconst saveRecord = async newObject => {\r\n\tconst req = await axios.post(apiBase, newObject)\r\n\treturn req.data\r\n}\r\n\r\nconst updateRecord = async (id, newObject) => {\r\n\tconst req = await axios.patch(`${apiBase}/${id}`, newObject)\r\n\treturn req.data\r\n}\r\n\r\nconst deleteRecord = async id => {\r\n\tconst req = await axios.delete(`${apiBase}/${id}`)\r\n\treturn req.data\r\n}\r\n\r\nexport default { getAll, saveRecord, updateRecord, deleteRecord }\r\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport NewWorkout from './NewWorkout'\nimport WorkoutTable from './WorkoutTable'\nimport workoutService from '../services/workouts'\n\nconst App = () => {\n\tconst [savedWorkouts, setSavedWorkouts] = useState([])\n\n\tconst sortDataByDate = data => {\n\t\treturn data.sort(function(a, b) {\n\t\t\tif (Date.parse(a.date) > Date.parse(b.date)) {\n\t\t\t\treturn -1\n\t\t\t}\n\t\t\tif (Date.parse(a.date) < Date.parse(b.date)) {\n\t\t\t\treturn 1\n\t\t\t}\n\t\t\treturn 0\n\t\t})\n\t}\n\n\tuseEffect(() => {\n\t\tconst getInitialLoad = async () => {\n\t\t\tconst req = await axios.get('http://localhost:3001/api/workouts')\n\t\t\tconst sortedData = sortDataByDate(req.data)\n\t\t\tsetSavedWorkouts(sortedData)\n\t\t}\n\t\tgetInitialLoad()\n\t}, [])\n\n\tconst handleNewRecordSave = async newRecord => {\n\t\tconst newSavedWorkout = await workoutService.saveRecord(newRecord)\n\t\tconst newSortedWorkouts = sortDataByDate(savedWorkouts.concat(newSavedWorkout))\n\t\tsetSavedWorkouts(newSortedWorkouts)\n\t}\n\n\tconst handleRecordDelete = async id => {\n\t\tawait workoutService.deleteRecord(id)\n\t\tconst newSortedWorkouts = sortDataByDate(\n\t\t\tsavedWorkouts.filter(workout => workout._id !== id)\n\t\t)\n\t\tsetSavedWorkouts(newSortedWorkouts)\n\t}\n\n\tconst handleRecordEdit = async (id, editObject) => {\n\t\tconst newEditedWorkout = await workoutService.updateRecord(id, editObject)\n\t\tconst newSortedWorkouts = sortDataByDate(\n\t\t\tsavedWorkouts.map(workout =>\n\t\t\t\tworkout._id !== newEditedWorkout._id ? workout : newEditedWorkout\n\t\t\t)\n\t\t)\n\t\tsetSavedWorkouts(newSortedWorkouts)\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div id='navigation' className='ui secondary pointing stackable menu'>\n\t\t\t\t<span className='active item'>Add/View Workouts</span>\n\t\t\t\t<span className='item'>Track Progress (TBD)</span>\n\t\t\t\t<div className='right menu'>\n\t\t\t\t\t<span className='item'>Sign In (TBD)</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='ui container'>\n\t\t\t\t<h1>Add A Workout</h1>\n\t\t\t\t<NewWorkout onSave={handleNewRecordSave} />\n\t\t\t</div>\n\t\t\t<div className='gray-container'>\n\t\t\t\t<div className='ui container'>\n\t\t\t\t\t{savedWorkouts.length > 0 ? (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t<h1>Your Workout History</h1>\n\t\t\t\t\t\t\t<WorkoutTable\n\t\t\t\t\t\t\t\tworkoutData={savedWorkouts}\n\t\t\t\t\t\t\t\tonSave={handleNewRecordSave}\n\t\t\t\t\t\t\t\tonDelete={handleRecordDelete}\n\t\t\t\t\t\t\t\tonEdit={handleRecordEdit}\n\t\t\t\t\t\t\t></WorkoutTable>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<h1>No Saved Workouts</h1>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './statics/index.css'\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}